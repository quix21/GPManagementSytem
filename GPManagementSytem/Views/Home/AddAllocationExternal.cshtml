@using GPManagementSytem.Models
@model GPManagementSytem.ViewModel.AllocationExternalViewModel
@{
    /**/

    ViewBag.Title = "Undergraduate Medical Student 2023/2024 GP Placement sign up form";

    var academicYearDD = ViewData["AcademicYearDD"] as List<SelectListItem>;
    var getGuid = ViewBag.Guid;

    string NumberStudentsRequested = "2";
}

<h1>@ViewBag.Title</h1>
<hr class="main">
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary();

    <div class="validation-summary-errors" id="inclusion-errors"></div>

    <div id="error" style="display:none"></div>
    @Html.HiddenFor(model => model.practice.Id)
    @Html.HiddenFor(model => model.practice.DateCreated)
    @Html.HiddenFor(model => model.practice.UpdatedBy)
    @Html.HiddenFor(model => model.practice.DateUpdated)
    @Html.HiddenFor(model => model.practice.ContactSurgery)
    @Html.HiddenFor(model => model.practice.NewPractice)
    @Html.HiddenFor(model => model.practice.Active)
    @Html.HiddenFor(model => model.allocations.PracticeId)
    @Html.HiddenFor(model => model.allocations.AcademicYear)

    <input type="hidden" name="guid" id="guid" value="@getGuid" />
    <input type="hidden" name="GlobalNumberStudentsRequested" id="GlobalNumberStudentsRequested" value="@NumberStudentsRequested" />

    
    <div class="container-maintext">
        <strong>Privacy and Confidentiality:</strong>
        <ul>
            <li>The University has a privacy statement that explains how the University collects, retains and processes data from suppliers and external partners:  <a href="https://www.liverpool.ac.uk/legal/data_protection/privacy-notices/suppliers/" target="_blank">https://www.liverpool.ac.uk/legal/data_protection/privacy-notices/suppliers/</a>  </li>
            <li>The data collected in this system will be used by the School of Medicine for the purpose of arranging GP placements for medical students.  The contact information collected will be used to communicate regarding matters pertaining to GP placements (including the Quality assurance of placements) and GP Tutor training and events.  It will also be used to invite partner colleagues to participate in Clinical Assessment examining and Admissions interviews for the School of Medicine.</li>
            <li>Technical support staff from the University may also have access to data submitted to this system, but would only view this in order to resolve technical issues.</li>
            <li>You do not have to provide the information, but all mandatory fields on the form are required in order for us to be able to arrange GP placements at your Practice and to keep your GP Tutors informed about relevant training and events. </li>
            <li>The data collected will be kept in the electronic system indefinitely as the School of Medicine may want to liaise with a Practice at any time in the future regarding GP placements or GP Tutor training and events.  Practice representatives will be invited to review the data for their Practice on an annual basis.  Should you wish to amend any details at any other time, you can do so by contacting the School of Medicine GP Tutor Support - Community Studies Unit at <a href="mailto:livunigp@liverpool.ac.uk">livunigp@liverpool.ac.uk.</a>  </li>
        </ul>

        <p><strong>Due to the curriculum changes we would ask that you sign up for as many blocks as possible.</strong></p>
        <p>
            Please could you complete the details below using a tick in the relevant box for your chosen Year group/s and return the form via email to ???liv.ac.uk by the 5th May, so that you may be included in the allocation.
            <br /><br />
            Thank you for your continued support.
        </p>
    </div>
    <h4>Practice Details</h4>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Surgery)</span>
                    @Html.EditorFor(model => model.practice.Surgery, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group-hidden">
                    <span class="input-group-text">Academic year</span>@Html.DropDownListFor(model => model.practice.AcademicYear, academicYearDD, "--- Select Year ---", new { Class = "form-select" })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row-hidden">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.SupplierNumber)</span>
                    @Html.EditorFor(model => model.practice.SupplierNumber, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Address1)</span>
                    @Html.EditorFor(model => model.practice.Address1, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Address2)</span>
                    @Html.EditorFor(model => model.practice.Address2, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Town)</span>
                    @Html.EditorFor(model => model.practice.Town, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Postcode)</span>
                    @Html.EditorFor(model => model.practice.Postcode, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.Telephone)</span>
                    @Html.EditorFor(model => model.practice.Telephone, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">

                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.PracticeManager)</span>
                    @Html.EditorFor(model => model.practice.PracticeManager, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.PMEmail)</span>
                    @Html.EditorFor(model => model.practice.PMEmail, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.GP1)</span>
                    @Html.EditorFor(model => model.practice.GP1, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.GP1Email)</span>
                    @Html.EditorFor(model => model.practice.GP1Email, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.GP2)</span>
                    @Html.EditorFor(model => model.practice.GP2, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.GP2Email)</span>
                    @Html.EditorFor(model => model.practice.GP2Email, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.AdditionalEmails)</span>
                    @Html.TextAreaFor(model => model.practice.AdditionalEmails,
new { @class = "form-control fullTextArea", @rows = 3 })
                </div>
            </div>
        </div>
    </div>


    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">@Html.LabelFor(model => model.practice.ListSize)</span>
                    @Html.EditorFor(model => model.practice.ListSize, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                </div>
            </div>
        </div>
    </div>
    <br /><br />

    <div class="containerExternal">

        <h4>3rd Year</h4>
        <div class="container">
            <div class="row">
                <table class="table table-hover AllocationExtTable">
                    <tr>
                        <td>Block 1 @(Model.signupDates.Year3B1From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B1To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B1Requested" name="Year3B1Requested" value="true" @(Model.Year3B1RequestedChecked ? "checked" : "")>

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 2 @(Model.signupDates.Year3B2From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B2To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B2Requested" name="Year3B2Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 3 @(Model.signupDates.Year3B3From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B3To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B3Requested" name="Year3B3Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 4 @(Model.signupDates.Year3B4From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B4To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B4Requested" name="Year3B4Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 5 @(Model.signupDates.Year3B5From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B5To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B5Requested" name="Year3B5Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 6 @(Model.signupDates.Year3B6From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B6To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B6Requested" name="Year3B6Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 7 @(Model.signupDates.Year3B7From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year3B7To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year3B7Requested" name="Year3B7Requested" value="true">

                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <h4>4th Year</h4>
        <div class="container">
            <div class="row">
                <table class="table table-hover AllocationExtTable">
                    <tr>
                        <td>Block 1 @(Model.signupDates.Year4B1From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B1To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B1Requested" name="Year4B1Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 2 @(Model.signupDates.Year4B2From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B2To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B2Requested" name="Year4B2Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 3 @(Model.signupDates.Year4B3From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B3To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B3Requested" name="Year4B3Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 4 @(Model.signupDates.Year4B4From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B4To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B4Requested" name="Year4B4Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 5 @(Model.signupDates.Year4B5From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B5To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B5Requested" name="Year4B5Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 6 @(Model.signupDates.Year4B6From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B6To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B6Requested" name="Year4B6Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 7 @(Model.signupDates.Year4B7From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B7To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B7Requested" name="Year4B7Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 8 @(Model.signupDates.Year4B8From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year4B8To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year4B8Requested" name="Year4B8Requested" value="true">

                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>


        <h4>5th Year</h4>
        <div class="container">
            <div class="row">
                <table class="table table-hover AllocationExtTable">
                    <tr>
                        <td>Block 1 @(Model.signupDates.Year5B1From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B1To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B1Requested" name="Year5B1Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 2 @(Model.signupDates.Year5B2From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B2To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B2Requested" name="Year5B2Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 3 @(Model.signupDates.Year5B3From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B3To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B3Requested" name="Year5B3Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 4 @(Model.signupDates.Year5B4From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B4To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B4Requested" name="Year5B4Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 5 @(Model.signupDates.Year5B5From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B5To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B5Requested" name="Year5B5Requested" value="true">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>Block 6 @(Model.signupDates.Year5B6From?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>up to and including</td>
                        <td>@(Model.signupDates.Year5B6To?.ToString("dd/MM/yyyy") ?? string.Empty)</td>
                        <td>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="Year5B6Requested" name="Year5B6Requested" value="true">

                            </div>
                        </td>
                    </tr>

                </table>
            </div>
        </div>
        <br />
        <div class="container">
            <div class="row">
                <table class="table AcceptTermsTable">
                    <tr>
                        <td><input class="form-check-input" type="checkbox" id="acceptTerms" name="acceptTerms" value="1">Please confirm your acceptance of the terms and conditions set out in the Service Contract that was attached to your invitation email by ticking this box. &nbsp; </td>

                    </tr>
                </table>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <table class="table AcceptTermsTable">
                    <tr>
                        <td>Name of person making this confirmation on behalf of the above-named Practice:</td>
                        <td>

                            <div class="input-group">

                                @Html.EditorFor(model => model.allocations.ConfirmationName, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                            </div>
                        </td>

                    </tr>
                </table>
            </div>
        </div>
    </div>

    @Html.ValidationSummary();
    <div class="validation-summary-errors" id="inclusion-errors"></div>

    <div id="error" style="display:none"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <hr>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-md-6"><button class="btn btn-primary btn-success" type="submit" id="submit">Submit Sign Up</button></div>
            <div class="col-md-6"></div>
        </div>
    </div>
}

<script type="text/javascript">

    $('#submit').prop("disabled", true);
    $('#acceptTerms').click(function () {
        if ($(this).is(':checked')) {
            $('#submit').prop("disabled", false);
        } else {
            if ($('.checks').filter(':checked').length < 1) {
                $('#submit').attr('disabled', true);
            }
        }
    });

</script>